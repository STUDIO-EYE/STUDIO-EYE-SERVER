plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.10'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.sonarqube" version "5.1.0.4882"
    id 'jacoco'
}

group = 'studio'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jar {
    enabled = false
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//    implementation 'org.springframework.boot:spring-boot-starter-validation'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // s3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // JWT
    implementation 'com.auth0:java-jwt:3.13.0'

    // modelmapper
    implementation 'org.modelmapper:modelmapper:3.1.1'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //SMTP
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '3.0.5'
    implementation 'jakarta.mail:jakarta.mail-api:2.1.2'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

    // SonarQube
    implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // spring-test 라이브러리 추가
    implementation 'org.springframework:spring-test:6.1.13'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sonar {
    properties {
//        property "sonar.projectName", System.getenv('SONARQUBE_SERVER')
//        property "sonar.projectKey", System.getenv('SONARQUBE_TOKEN')
//        property "sonar.hostUrl", System.getenv('SONARQUBE_HOST_URL')
        property "sonar.projectName", "studio-eye-sonar"
        property "sonar.projectKey", "studio-eye-sonar"
//        property "sonar.hostUrl", "http://3.36.218.65:9000"
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Generates report after tests are run
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('jacocoReport')
}

jacocoTestReport {
    dependsOn test // 테스트가 실행된 후 커버리지 리포트 생성
    reports {
        xml.required.set(false)
        csv.required.set(true)
        html.required.set(true)
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, includes: [
                            "studio/studioeye/domain/**/application/**"
                    ])
                })
        )
    }
}

jacocoTestCoverageVerification {
    // QueryDSL QDomain 제외시키기
    def QDomains = []
    // qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
    for (qPattern in '*.QA'..'*.QZ') {
        QDomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            // rule 활성화
            enabled = true
            // 클래스 단위로 룰 체크
            element = 'CLASS'
            // 라인 커버리지를 최소 80% 만족
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.80
//            }
            // 마찬가지로 제거 대상 지정
            excludes = [
                    "co.kirikiri.domain.**.**",
                    "**.*Application*",
                    "**.*Config*",
                    "**.*Interceptor*",
                    "**.*Exception*",
                    "**.*Controller*",
                    "**.*Repository*",
                    "**.*Dto*"
            ]
        }
    }
}
